01. O que é Solidity?
02. O que são Smart Contracts?
03. O que é uint?
04. Como são os operadores matemáticos?
05. O que são Structs?
06. O que são arrays?
07. O que são públicos (public) ou privados (private)?
08. O que são funções?
09. Como rodar funções?
10. Como criar novas structs?
11. Como usar return nas funções?
12. O que são funções pure e view?
13. O que é Keccak256?
14. O que é Typecasting?
15. O que são Eventos?
16. O que são endereços?
17. O que é Mapping?
18. O que é Msg.sender?
19. O que é Require?




<(^.^<)                     <(^.^)>                     (>^.^)> 




01. O que é Solidity?
    Solidity é uma linguagem de programação semelhante as linguagens C
    e Javascript, criada para interagir com a blockchain do Ethereum
    por meio de Smart Contracts.


02. O que são Smart Contracts?
    Smart Contracts são programas desenvolvidos e "instalados" na rede do
    Ethereum que ficam armazenados para sempre, podendo ser acionado 
    para diversas finalidades como por exemplo: rodar funções,
    armazenar variáveis como a uint, etc.

03. O que é uint?
    Unsigned integer ou simplesmente um *número não-negativo*, no entanto
    o uint padrão no Solidity é o uint256 (2**256 bits), mas também podem
    ser utilizados uints com menos bits como uint8, uint16, uint32, etc.
    Resumidamente são váriáveis que ficam armazenadas na blockchain para
    sempre, que podem ser utilizadas para, por exemplo, realizar cálculos
    matemáticos com operadores.

04. Como são os operadores matemáticos?
    São expressões para manipulação de números como:      
    
        Adição: x + y
        Subtração: x - y
        Multiplicação: x * y
        Divisão: x / y
        Potência: x ** y
        Modulus / remainder: x % y (por exemplo, 13 % 5 é 3,
                                    porque se vc dividir 13 por 5,
                                    3 é o remainder)
                                    

05. O que são Structs?
    As vezes é necessário um conjunto mais complexo para estruturar dados.
    Para isso o Solidity oferece as structs.
        Ex: struct Person {
                uint age;
                string name;
            }

    Structs permitem que vc utilize os dados para multiplas finalidades.
    Veja que além do uint também utilizamos uma string (UTF-8).

06. O que são arrays?
    Quando vc deseja armazenar uma coleção de dados existe o array.
        Existem 2 tipos de array
            - fixed
            - dynamic

            ex:
                Array with a fixed length of 2 elements:
                    uint[2] fixedArray;
                
                another fixed Array, can contain 5 strings:
                    string[5] stringArray;
                
                a dynamic Array - has no fixed size, can keep growing:
                    uint[] dynamicArray;

    Vc também pode criar um array de structs usando:
        Person[] people; // array dinamico, pode continuar adicionando

    Lembre-se: eles podem ser públicos ou privados.

07. O que são públicos (public) ou privados (private)?
    No caso de private são variáveis, funções, etc que podem ser acessados
    apenas pelo smart contract, já o public permite o acesso externo.
    
    Lembre-se: Public é o default!
               Caso utilize uma função private colocar _ antes do nome.

08. O que são funções?
    Funções são declarações que aceitam argumentos para processamento.
    
    Ex. function eatHamburgers(string memory _name, uint _amount) public {

        }
    
    Função eatHamburgers, que aceita 2 parâmetros: uma string e uma uint.
    Perceba que ela é pública e nós também estamos fornecendo intruções
    ondeo a variável (string) _name deve ser armazenada na memoria (memory).
    Isso é necessário para todas os parâmetros como arrays, structs,
    mappings e strings..

09. Como rodar funções?
    Vc pode acessar as funções de duas forma:

        - Por valor: significa que o compilador do Solidity cria uma nova
                     cópia do valor do parâmetro e passa esse valor para a
                     função. Isso permite modificiar o valor sem se preocupar
                     que o valor inicial do parâmetro seja alterado.

        - Referência: significa que sua função pode ser acionada por...
                      referência a variável original. Consequentemente,
                      se a sua função mudar o valor da variável que ela 
                      recebe, o valor da variável original também é alterado.

    Nota: por convenção os parâmetros de uma função são iniciados por "_"
          underline (_name), para diferenciá-las das variáveis globais.


10. Como criar novas structs?
    Pegando pelo exemplo:   struct Person {
                                uint age;
                                string name;
                            }

                            Person[] public people;

    Criar uma nova pessoa:  Person satoshi = Person(172, "Satoshi");

    Adicionar no array:     people.push(satoshi);

    Combinando os dois:     people.push(Person(16, "Vitalik"));

    A função .push() adiciona os dados no final do array, em ordem crescente.

        Ex: uint[] numbers;
            numbers.push(5);
            numbers.push(10);
            numbers.push(51);
            // numbers = [5, 10, 51]

11. Como usar return nas funções?

    Retornar um valor da função:
    
    string greeting = "What's up dog";

    function sayHello() public returns (string memory) {
        return greeting;
    }

    Em Solidity a declaração da função contém o dado que será retornado,
    nesse caso uma string.

12. O que são funções pure e view?
    Na função anterior nós não modificamos os dados armazenados, apenas consultamos,
    portanto podemos declará-la da seguinte forma:
        function sayHello() public view returns (string memory)

    As funções pure, significa que ela sequer acessará algum dado armazenado,
    para isso considere o seguinte:
        function _multiply(uint a, uint b) private pure returns (uint) {
            return a * b;
        }
    Esta função apenas recebe dois parâmetro uint e retorna o resultado de a + b
    Ela não lê nada.


13. O que é keccak256?
    O keccak256 é uma função de hashing nativa do Ethereum, que é
    basicamente uma versão do SHA3. Uma função hash que recebe um
    dado e o transforma em um número hexadecimal de 256 bits (2**256).
    Qualquer mudança sutil no dado de entrada causará uma enorme mudança
    no hash retornado.

    O keccak256 aceita um único parâmetro do tipo bytes. Isso significa que
    nós temos que "empacotar" qualquer parâmentro com a função abi.enconde()
    antes de passá-lo na  função keccak256();

    Ex:
    keccak256(abi.encodePacked("aaaab"));
    //6e91ec6b618bb462a4a6ee5aa2cb0e9cf30f7a052bb467b0ba58b8748c00d2e5
    
    keccak256(abi.encodePacked("aaaac"));
    //b1f078126895a1424524de5321b339ab00408010b7cf0e6ed451514981e58aa9
    
    Veja como os outputs são muito diferentes, mesmo trocando apenas
    a letra "b" por "c";

14. O que é Typecasting?
    As vezes é necessário converter entre tipos de dados diferentes.
        Exemplo:    uint8 a = 5;
                    uint b = 6; (uint === uint256);
                    
                    uint8 c = a * b;
                    // devolve um erro porque a * b retorna uma uint, não uint8

                    uint8 c = a * uint8(b);
                    // Fazemos o Typecast em b como uma uint8 pra funcionar


15. O que são Eventos?

    Eventos são uma forma do smart contract comunicar para o front-end
    do seu app que algo aconteceu na blockchain, que pode estar em modo
    "listening" para saber que algo foi alterado e tomar as ações assim
    que elas ocorrerem.

    Exemplo: 
        event IntegersAdded(uint x, uint y, uint result);

        function add(uint _x, uint _y) public returns (uint){
            uint result = _x + _y;
            
            // Aciona um evento para que o app saiba que a função foi chamada
            emit IntegersAdded(_x, _y, result);
            return result;
        }

    O front-end do seu app poderia então "escutar" o evento. Uma implementação
    javascript seria da seguinte forma:
        YourContract.IntegersAdded(function(error, result)) {
            // fazer qualquer coisa com o resultado
        }


16. O que são endereços?
    A blockchain do Ethereum é feita de carteiras, que vc pode
    imagina-las como uma conta corrente de banco. Uma carteira tem um
    saldo em Ether (a moeda usada na blockchan do Ethereum), e vc pode
    enviar e receber pagamentos em Ether para outras carteiras, 
    exatamente como seria com uma conta-corrente em qualquer banco.

    Cada carteira possui um endereço, que funciona da mesma forma que 
    o número de agência e conta-corrente. É um identificador único 
    que aponta para a carteira, e este é um exemplo:
        ex: 0x0cE446255506E92DF41614C46F1d6df9Cc969183


17. O que é Mapping?
    Assim como structs e arrays, mappings são outra maneira de armazenar
    dados organizados.
        Ex: 
            // Armazenando a informação do saldo de uma carteira em um uint:
                    mapping (address => uint) public accountBalance;

            // Ou para um controle de usuários baseado no userId
                    mapping (uint => string) userIdToName;

    Mapping é uma forma de armazenar e buscar dados key-value. No primeiro
    exemplo o key é o endereço e o value é um uint, e no segundo exemplo
    a key é um uint e o value uma string.
    Resumidamente você chama o Key e ele retorna o Value.

18. O que é msg.sender?
    No solidity certas variáveis globais estão a disposição para todas as
    funções. Uma delas é msg.sender, que se refere ao endereço da pessoa
    (ou smart contract) que fez uma call (chamada) na função.
        Nota: Em solidity, a execução da função sempre inicia a partir de
        um caller (chamador) externo. Um contrato ficará parado na blockchain
        fazendo nada até que alguém a acione (o caller/chamador), então sempre
        teremos um msg.sender.
            Ex msg.sender atualizando um mapping:
                mapping (address => uint) favoriteNumber;

                function setMyNumber(uint _myNumber) public {
                    // atualiza o mapping 'favoriteNumber'
                    //  para armazenar o valor '_myNumber' Subtração
                    //  a chave (key) msg.sender

                    favoriteNumber[msg.sender] = _myNumber;
                }

                function whatIsMyNumber() public view returns(uint) {
                    // retorna o valor de "favoriteNumber" armazenado sob
                    // a chave do endereço do "msg.sender"

                    return favoriteNumber[msg.sender];
                }

        Usar o msg.sender garante a segurança da blockchain do ethereum.
        A única forma de alguém alterar este dado seria roubando a PK do
        msg.sender/titular.


19. O que é Require?
    O require tem a finalidade de parar completamente a execução de um
    smart contract caso uma condição não retorne como verdadeira.
    O Require retornará um erro e interromperá a execução do smart contract.
        ex: Diga olá somente para o Vitalik!

            function sayHelloToVitalikOnly(string memory _name) public returns (string memory) {
                // compara se _name é igual a "Vitalik". Retorna um erro e termina
                // a execução se não retornar verdadeiro.
                // Como o solidity não tem um comparador de strings negativo
                // nós comparamos o hash keccak256 para verificar se elas são
                // iguais.

                require(keccak256(abi.encodePacked(_name)) == keccak256(abi.encodePacked("Vitalik")));

                // se hash _name for igual ao hash "Vitalik", proceder com a função:
                return "Hi Vitalik!";
            }



20. O que é herança?
    Para facilitar a programação e leitura dos smart contracts o Solidity
    oferece a possibilidade de dividr o código-fonte em múltiplos contratos
    para melhorar a organização, ao invés de desenvolvê-lo em um único
    contrato.
        Ex: 
        contract Doge {
            function catchphrase() public returns (string memory) {
                return "Who said Doge?";
            }
        }

        contract BabyDoge is Doge {
            function anotherCatchphrase() public returns (string memory) {
                return "To The Moooon, Doge!";
            }
        }



21. O que é import?
    Em Solidity é possível dividir o contrato em múltiplos contratos através
    da herança (Cap.20) com a totalidade do código-fonte em um único arquivo,
    no entanto o import oferece a possibilidade de importar contratos e 
    dividi-los em múltiplos arquivos do código-fonte.
        Ex:
                pragma solidity ^0.6.0;

                // importa o contrato "OtherContract.sol"
                import "./OtherContract.sol";

                // define a herança entre os contratos MyContract sob OtherContract 
                contract MyContract is OtherContract {
                    
                }


22. Storage vs. Memory?
    Em Solidity existem dois locais onde você pode armazenar as variáveis - 
    em Storage e em Memory.
    
        - Storage: se refere aos dados inseridos permanentemente na blockchain

        - Memory: se refere aos dados que são descartados após a execução
        da função.

    Nota: Pense em Storage como o disco-rígido (HD) de um computador e 
          Memory como a memória RAM.

    O default do Ethereum é definir as State variables, que são definidas
    fora do escopo de função (globais), como Storage e registradas
    permanentemente na Blockchain, enquanto as variáveis definidas dentro
    do escopo de funções são definidas como Memory e desaparecem após
    o término da execução da função.
        Ex:
            contract SandwichFactory {
                struct Sandwich {
                    string name;
                    string status;
                }

                // array dinâmico para inserção de structs em um array
                Sandwich[] sandwiches;

                function eatSandwich(uint _index) public {

                    Sandwich storage mySandwich = sandwiches[_index];
                    mySandwich.status = "Eaten!";

                    Sandwich memory anotherSandwich = sandwiches[_index + 1];
                    anotherSandwich.status = "Eaten too!";
                    sandwiches[_index + 1] = anotherSandwich;
                }
            }